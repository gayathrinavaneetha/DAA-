def is_safe(board, row, col):
    for i in range(col):
        if board[row][i] == 1:
            return False
    for i, j in zip(range(row, -1, -1), range(col, -1, -1)):
        if board[i][j] == 1:
            return False
    for i, j in zip(range(row, len(board)), range(col, -1, -1)):
        if board[i][j] == 1:
            return False
    return True
def solve_n_queens(board, col):
    if col >= len(board[0]):
        return True
    for i in range(len(board)):
        if is_safe(board, i, col):
            board[i][col] = 1
            if solve_n_queens(board, col + 1):
                return True
            board[i][col] = 0
    return False
def n_queens_8x10():
    board = [[0 for _ in range(10)] for _ in range(8)]
    if solve_n_queens(board, 0):
        return [i + 1 for i in range(8) if 1 in board[i]]
    return []
solution_8x10 = n_queens_8x10()
print("Possible solution for 8x10 board:", solution_8x10)
